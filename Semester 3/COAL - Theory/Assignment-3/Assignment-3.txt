;Q1

include irvine32.inc
arrSum PROTO, 
	array1:PTR DWORD, size_arr:DWORD, starti:DWORD, endi:DWORD

.data
	arr1 SDWORD 30, -40, 20, 65, 80,45
	strt BYTE ?
	endt BYTE ?
.code
main PROC
	mov strt, 20
	mov endt, 50
	INVOKE arrSum, ADDR arr1, LENGTHOF arr1, strt, endt
	call  crlf
	mov strt, 35
	mov endt, 90
	INVOKE arrSUM, ADDR arr1,LENGTHOF arr1, strt,endt
exit
main endp

arrSum PROC USES ebx ecx edx esi edi, array1:PTR DWORD, size_arr:DWORD, starti:DWORD, endi:DWORD
	LOCAL flag:BYTE ;flag tell when to start sum
	mov flag, 10
	mov esi, array1
	mov ecx, size_arr
	mov ebx, starti
	mov edx, endi
	mov eax,0
	L1:
		cmp ebx, [esi] ;once i is found change flag=1
		JE start_flag
	cont_1:
		cmp edx, [esi];
		JE end_flag
		cmp flag, 1
		JE do_sum ;once flagis 1 startmcvvm sum
	cont_2:
		cmp flag, 0
		JE end_it_add ;if 0 stop
		add esi, type arr1
		LOOP L1
		JMP end_it
	do_sum:
		add eax, [esi]
		add esi, type arr1
		LOOP L1
JMP end_it
start_flag:
	mov flag, 1
	JMP cont_1
end_flag:
	mov flag, 0
	JMP cont_2
end_it_add:
	add eax,[esi];add the last inclusive  value
	call writeDec
	JMP end_fin
end_it:
	call writeDec
end_fin:
ret
arrSum ENDP
end main


;Q2

include irvine32.inc
swap PROTO
SelectSort PROTO
.data
	arr DWORD 60,4,17,45,7
	index DWORD 0
	swapIndx DWORD 0
.code
main PROC
	INVOKE SelectSort
exit
main ENDP

SelectSort PROC
	mov esi, 0
	mov eax, 0 ;handles the max number
	mov ecx, LENGTHOF arr
SORT:
	mov index, 0
	mov eax, 0
	push ecx
	Find_max:
		cmp arr[esi], eax
		JA yes
	cont:
		add esi, type arr
		add index, type arr
		Loop Find_max
	sub esi, type arr
	INVOKE swap
	pop ecx
	mov esi, 0
	Loop SORT
jmp endd
yes:
	mov eax, arr[esi]
	mov ebx, index ;ebx holds index
	JMP cont
endd:
ret
SelectSort ENDP

swap PROC
	mov eax, arr[esi] ; Move Nth val  in eax
	xchg arr[ebx], eax ;xchg Nth and  kth val
	mov arr[esi], eax
ret
swap ENDP
END main


;Q3

include irvine32.inc
bubbleSort PROTO, arr_adr:PTR DWORD, arr_size:DWORD
print_arr PROTO, arr_adr: PTR DWORD, arr_size:DWORD
.data
	arr BYTE  4, 3, 5, 7, 9, 0, 2, 1, 6, 8
	space BYTE ", ",0
.code
main PROC
	INVOKE bubbleSort, ADDR arr, LENGTHOF arr
	INVOKE print_arr, ADDR arr, LENGTHOF arr
exit
main ENDP

bubbleSort PROC, arr_adr:PTR DWORD, arr_size:DWORD
	mov ebx, arr_size
	mov ecx, ebx
	mov esi, arr_adr
	mov edi, arr_adr
	add edi, type arr
	mov eax, 0
	L1:
		mov esi, arr_adr
		mov edi, arr_adr
		add edi, type arr
		push ecx
		mov ecx, ebx
		dec ecx
		L2:
			mov al, [esi]
			cmp al, [edi]
			JG swap
			back:
			add esi, type arr
			add edi, type arr
			loop L2
		pop ecx
		loop L1
		jmp endd
	swap:
		xchg al, [edi]
		mov [esi], al
		jmp back
endd:
ret
bubbleSort ENDP

print_arr PROC, arr_adr: PTR DWORD, arr_size:DWORD
	mov ecx, arr_size
	mov esi, arr_adr
	mov eax, 0
	mov edx, offset space
	print_it:
		mov al, [esi]
		call writeDec
		call writeString
		add esi, type arr
		loop print_it
ret
print_arr endp
END main


;Q4

include irvine32.inc
FACTORIAL PROTO
.data
	ask BYTE "Input a positive integer: ",0
.code
main PROC
	mov edx, offset ask
	call writeString
	call readDec
	mov ecx, eax
	mov eax, 1
	call FACTORIAL
	call writeDec
	call crlf
exit
main ENDP

FACTORIAL PROC
	cmp ecx, 0 ;base case
	JE endd
	cmp ecx, 1 ;base case
	JE endd
	mul ecx
	dec ecx
	call FACTORIAL
endd:
ret
FACTORIAL ENDP
END main;Q4

include irvine32.inc
FACTORIAL PROTO
.data
	ask BYTE "Input a positive integer: ",0
.code
main PROC
	mov edx, offset ask
	call writeString
	call readDec
	mov ecx, eax
	mov eax, 1
	call FACTORIAL
	call writeDec
	call crlf
exit
main ENDP

FACTORIAL PROC
	cmp ecx, 0 ;base case
	JE endd
	cmp ecx, 1 ;base case
	JE endd
	mul ecx
	dec ecx
	call FACTORIAL
endd:
ret
FACTORIAL ENDP
END main


;Q5

include irvine32.inc
FACTORIAL PROTO
.data
	ask BYTE "Input a char: ",0
	pr BYTE "The ASCII code of ",0
	pr2 BYTE " in binary is:", 0
	pr3 BYTE "Number of ones are: ",0
	one_counter BYTE 0
.code
main PROC
	mov eax, 0
	mov edx, offset ask
	call writeString
	call readChar
	call crlf
	mov edx, offset pr
	call writeString
	mov bl, al
	mov eax, 0
	movzx eax, bl
	call writeChar
	mov edx, offset pr2
	call writeString
	call writeBin
	call crlf
	call calcOnes
	movzx eax, one_counter
	mov edx, offset pr3
	call writeString
	call writeDec
exit
main ENDP

calcOnes PROC USES eax
	LOCAL tmp:BYTE
	mov tmp,al
	mov eax, 0
	mov al, tmp
	mov ecx, 2
	L1:
		mov edx, 0
		div ecx
		cmp edx , 1
		JE yes
	cont:
		cmp eax, 0
		JBE endd
		JMP L1
yes:
	inc one_counter
	JMP cont
endd:
ret
calcOnes ENDP
END main




;Q6

include irvine32.inc
CountMatches PROTO 
.data
	arr1 SDWORD -1, 3, 5, -3, 7, 5, 8
	arr2 SDWORD -2, 3, 5, 2,  7, 6, 8
.code
main PROC
	mov eax, 0
	push OFFSET arr1
	push OFFSET arr2
	push LENGTHOF arr1
	push LENGTHOF arr2
	INVOKE CountMatches
exit
main ENDP

CountMatches PROC
	push ebp
	mov ebp,esp
	mov eax, 0
	mov esi, [ebp+20] ;offset of arr1
	mov edi, [ebp+16] ;offset of arr2
	mov ecx, [ebp+12] ;size of arr1
	mov ebx, [ebp+8] ;size off arr2
	L1:
		mov edx, [esi]
		cmp edx, [edi]
		JE yes
	cont:
		add esi, type arr1
		add edi, type arr2
		dec ebx
		cmp ebx, 0
		JLE endd
		Loop L1
JMP endd
yes:
	inc eax ;inc eax if same
	JMP cont
endd:
pop ebp
ret
CountMatches ENDP
END main


;Q7

include irvine32.inc
Extended_Sub PROTO
.data
	data1 QWORD 1234567895468795h
	data2 QWORD 1215654582311550h
.code
main PROC
	mov eax, 0
	mov eax, DWORD PTR data1
	mov edx, DWORD PTR [data1+4];first half
	mov ebx, DWORD PTR data2
	mov ecx, DWORD PTR [data2+4];first half
	call Extended_Sub
	mov ebx, eax
	mov eax, edx
	call writeDec
	mov eax, ebx
	call writeDec
exit
main ENDP

Extended_Sub PROC
	sub edx, ecx
	sub eax, ebx
ret
Extended_Sub ENDP

end main



;Q8

include irvine32.inc
Extended_Add PROTO
.data
	data1 QWORD 1234567895468795h
	data2 QWORD 1215654582311550h
.code
main PROC
	mov eax, 0
	mov eax, DWORD PTR data1
	mov edx, DWORD PTR [data1+4];first half
	mov ebx, DWORD PTR data2
	mov ecx, DWORD PTR [data2+4];first half
	call Extended_Add
	mov ebx, eax
	mov eax, edx
	call writeDec
	mov eax, ebx
	call writeDec
exit
main ENDP

Extended_Add PROC
	add edx, ecx
	add eax, ebx
ret
Extended_Add ENDP

end main


;Q9

include irvine32.inc
gcd PROTO, n1:DWORD, n2:DWORD
.data
	n1 DWORD 0
	n2 DWORD 0
.code
main PROC
	mov n1, 5
	mov n2, 20
	INVOKE gcd, n1, n2
	call writeDec
	call crlf
	mov n1, 24
	mov n2, 18
	INVOKE gcd, n1, n2
	call writeDec
	call crlf
	mov n1, 432
	mov n2, 226
	INVOKE gcd, n1, n2
	call writeDec
	call crlf
exit
main ENDP

gcd PROC, n11:DWORD, n22:DWORD
	cmp n11, 0 ;if a is 0
	JNE L2
	mov eax, n22
	JMP endd ;mov b in eax and leave
L2:
	cmp n22, 0 ;if b is 0
	JNE L3
	mov eax, n22;mov a in eax and leave
	JMP endd
L3:
	mov eax, n11
	CMP eax, n22  ;cmp a == b
	JNE L4
	mov eax, n11
	JMP endd
L4:
	mov ebx, n11 ;a
	mov edx, n22 ;b
	cmp ebx, edx
	JNA L5
	mov eax, ebx
	sub eax, n22
	INVOKE gcd, eax, edx
	JMP endd
L5:
	mov eax, edx
	sub eax, n11
	INVOKE gcd, n11, eax
endd:
ret
gcd endp

end main


;Q10

include irvine32.inc
CountNearMatches PROTO

.data
	arrS1 SDWORD 4, 5, 43, 4, 3, 6,-2, -4
	arrS2 SDWORD 9, 2, 3, -5, -3, 2, 11, 2
.code
main PROC
	mov ebx, 4 ;max difference is 4
	push ebx
	push offset arrS1
	push offset arrS2
	push LENGTHOF arrS1
	push LENGTHOF arrS2
	INVOKE CountNearMatches
exit
main ENDP

CountNearMatches PROC
	LOCAL size1:DWORD, size2:DWORD, maxDF:DWORD
	mov eax, 0
	push ebp
	mov ebp, esp
	mov edx, [ebp+40]
	mov maxDF, edx
	mov edx, [ebp+28]
	mov size1, edx
	mov ebx, [ebp+24]
	mov size2, ebx
	mov esi, [ebp+36]
	mov edi, [ebp+32]
	mov ecx, size1
L1:
	mov ebx, [esi]
	sub ebx, [edi]
	CMP ebx, maxDF
	JNLE L2
	inc eax
L2:
	add esi, type arrS1
	add edi, type arrS2
	CMP size2, 0
	JLE ENDD
	dec size2
	LOOP L1
ENDD:
leave
ret
CountNearMatches ENDP
END main;Q10

include irvine32.inc
CountNearMatches PROTO

.data
	arrS1 SDWORD 4, 5, 43, 4, 3, 6,-2, -4
	arrS2 SDWORD 9, 2, 3, -5, -3, 2, 11, 2
.code
main PROC
	mov ebx, 4 ;max difference is 4
	push ebx
	push offset arrS1
	push offset arrS2
	push LENGTHOF arrS1
	push LENGTHOF arrS2
	INVOKE CountNearMatches
exit
main ENDP

CountNearMatches PROC
	LOCAL size1:DWORD, size2:DWORD, maxDF:DWORD
	mov eax, 0
	push ebp
	mov ebp, esp
	mov edx, [ebp+40]
	mov maxDF, edx
	mov edx, [ebp+28]
	mov size1, edx
	mov ebx, [ebp+24]
	mov size2, ebx
	mov esi, [ebp+36]
	mov edi, [ebp+32]
	mov ecx, size1
L1:
	mov ebx, [esi]
	sub ebx, [edi]
	CMP ebx, maxDF
	JNLE L2
	inc eax
L2:
	add esi, type arrS1
	add edi, type arrS2
	CMP size2, 0
	JLE ENDD
	dec size2
	LOOP L1
ENDD:
leave
ret
CountNearMatches ENDP
END main
